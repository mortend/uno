apply plugin: 'com.android.@(LIBRARY:Defined:test('library', 'application'))'
#if @(KOTLIN:defined)
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
#endif

configurations { native_implementation }

dependencies {
    implementation fileTree(dir: 'src/main/libs', include: ['*.jar'])
    @(Gradle.Dependency.Implementation:join('\n    ', 'implementation \'', '\''))
    @(Gradle.Dependency.NativeImplementation:join('\n    ', 'native_implementation \'', '\''))
    @(Gradle.Dependency:join('\n    '))
}

// Extracts native libraries from AARs in the native_implementation configuration.
// This is done so that the NDK can access these libraries.
task extractNativeLibraries() {
    doFirst {
        configurations.native_implementation.files.each { f ->
            copy {
                from zipTree(f)
                into 'build/native'
                include 'jni/**/*'
            }
        }
    }
}

tasks.whenTaskAdded {
    task-> if (task.name.contains('external') && !task.name.contains('Clean')) {
#if @(Gradle.Dependency.NativeImplementation:IsRequired)
        task.dependsOn(extractNativeLibraries)
#endif
    }
}

repositories {
    @(Gradle.Repository:join('\n    '))
}

android {
    compileSdkVersion = @(SDK.CompileVersion)
    buildToolsVersion = '@(SDK.BuildToolsVersion)'

    defaultConfig {
#if !@(LIBRARY:defined)
        applicationId = '@(Activity.Package)'
#endif
        minSdkVersion @(SDK.MinVersion)
        targetSdkVersion @(SDK.TargetVersion)
        versionCode = @(Project.Android.VersionCode)
        versionName = '@(Project.Android.VersionName)'
        multiDexEnabled @(Project.Android.MultiDexEnabled:isset:test(@(Project.Android.MultiDexEnabled:bool),true))

        ndk {
#if @(DEBUG:defined)
            abiFilters = [@(Project.Android.Architectures.Debug:join(', ', '\'', '\''))]
#else
            abiFilters = [@(Project.Android.Architectures.Release:join(', ', '\'', '\''))]
#endif
        }

        externalNativeBuild {
            cmake {
                // The build configuration of the native binary might differ from the build
                // configuration of the APK. For performance reasons, we don't want to use the
                // Fuse Simulator on the significantly slower debug binaries, so building debug by
                // default means we are giving users a bad experience by default. Native debug
                // binaries are only really useful when actually debugging generated C++ code.
                // Running 'uno build android --debug' will produce debuggable C++ code.
                arguments '-DCMAKE_BUILD_TYPE=@(Native.Configuration)',
                    '-DANDROID_STL=@(STL)',
                    '-DANDROID_PLATFORM=android-@(NDK.PlatformVersion)',
                    '-DANDROID_TOOLCHAIN=clang',
                    '-DANDROID_NDK=@(NDK.Directory)'
            }
        }

#if @(Project.Android.SupportedLanguages:isset)
        resConfigs @(Project.Android.SupportedLanguages:join(', ', '\"', '\"'))
#endif

    }

#if @(Project.Android.Bundle.Language.EnableSplit:isset) || @(Project.Android.Bundle.Density.EnableSplit:isset) || @(Project.Android.Bundle.ABI.EnableSplit:isset)
    bundle {
        #if @(Project.Android.Bundle.Language.EnableSplit:isset)
        language {
            // Specifies that the app bundle should not support
            // configuration APKs for language resources. These
            // resources are instead packaged with each base and
            // dynamic feature APK.
            enableSplit = @(Project.Android.Bundle.Language.EnableSplit:toLower)
        }
        #endif
        #if @(Project.Android.Bundle.Density.EnableSplit:isset)
        density {
            // This property is set to true by default.
            enableSplit = @(Project.Android.Bundle.Density.EnableSplit:toLower)
        }
        #endif
        #if @(Project.Android.Bundle.ABI.EnableSplit:isset)
        abi {
            // This property is set to true by default.
            enableSplit = @(Project.Android.Bundle.ABI.EnableSplit:toLower)
        }
        #endif
    }
#endif

    externalNativeBuild {
        cmake {
            path 'src/main/CMakeLists.txt'
        }
    }

#if @(Project.Android.Key.Store:isset)
    signingConfigs {
        release {
            keyAlias '@(Project.Android.Key.Alias)'
            keyPassword '@(Project.Android.Key.AliasPassword)'
            storeFile file('@(Project.Android.Key.Store:path)')
            storePassword '@(Project.Android.Key.StorePassword)'
        }
    }
#endif

    buildTypes {
        release {
#if @(DEBUG:defined)
            debuggable = true
#elif @(Project.Android.Key.Store:isset)
            signingConfig = signingConfigs.release
#endif
            minifyEnabled = false
            proguardFiles 'proguard-rules.pro'
        }
    }

    aaptOptions {
        cruncherEnabled = false
    }

    lintOptions {
        checkReleaseBuilds = false
    }
}

@(Gradle.BuildFile.End:join('\n'))
